\chapter{Day 2: Inventory Management System}

<<Day02.hs>>=
module Day02
  ( partOne
  , partTwo
  ) where

<<Imports>>

<<Types and parsers>>

<<Part One>>

<<Part Two>>
@

\section{Type aliases and parsers}

<<Types and parsers>>=
type BoxID = String

boxID :: Parser BoxID
boxID = some letter

boxIDs :: Parser [BoxID]
boxIDs = boxID `sepEndBy` newline

type Checksum = Integer
@ %def BoxID
@ %def boxIDs

\section{Part One}

<<Part One>>=
checksum :: [BoxID] -> Integer
checksum = fmap frequencies >>>
	   filter (elem 2) &&& filter (elem 3) >>>
	   length *** length >>>
	   product >>>
	   fromIntegral

@ %def checksum

<<Part One>>=
partOne :: ByteString -> Maybe Checksum
partOne = maybeParseByteString boxIDs >=> pure . checksum
@ %def partOne

\section{Part Two}

<<Part Two>>=
correctBoxIDs :: [BoxID] -> Maybe (BoxID, BoxID)
correctBoxIDs = listToMaybe . mapMaybe go . tails
  where
    go :: [BoxID] -> Maybe (BoxID, BoxID)
    go (x:xs@(_:_)) = (,) <$> pure x <*> find (hammingSimilar 1 x) xs
    go _            = Nothing

@ %def correctBoxIDs

<<Part Two>>=
partTwo :: ByteString -> Maybe String
partTwo = maybeParseByteString boxIDs >=>
	  correctBoxIDs >=>
	  uncurry commonElems
@ %def partTwo

\section{Imports}

<<Imports>>=
import           Control.Arrow   ((&&&), (***), (>>>))
import           Control.Monad   ((>=>))
import           Data.ByteString (ByteString)
import           Data.List       (find, tails)
import           Data.Maybe      (listToMaybe, mapMaybe)
import           Text.Trifecta   (Parser, letter, newline, sepEndBy, some)
import           Util            (commonElems, frequencies, hammingSimilar,
				  maybeParseByteString)
@
