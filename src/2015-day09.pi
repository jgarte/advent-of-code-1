%% http://picat-lang.org/picatbook2015/constraint_solving_and_planning_with_picat.pdf
%% https://sofdem.github.io/gccat/gccat/Ccircuit.html

import cp.

main =>
    M = {{0,1,1,1,1,1,1,1,1},
         {1,0,46,3,136,84,107,22,55},
         {1,46,0,149,115,96,14,143,14},
         {1,3,149,0,144,71,137,129,65},
         {1,136,115,144,0,8,23,68,4},
         {1,84,96,71,8,0,101,52,105},
         {1,107,14,137,23,101,0,65,125},
         {1,22,143,129,68,52,65,0,63},
         {1,55,14,65,4,105,125,63,0}},
    part1(M),
    part2(M).

part1(M) =>
    N = length(M),
    NextArr = new_array(N),
    NextArr :: 1..N,
    CostArr = new_array(N),
    circuit(NextArr),
    foreach(I in 1..N)
        CostArr[I] #> 0,
        element(NextArr[I], M[I], CostArr[I])
    end,
    TotalCost #= sum(CostArr) - 2,
    foreach(I in 1..N)
        Pairs = [(M[I,J], J) : J in 1..N, M[I,J] > 0].sort(),
        Neibs = [J : (_, J) in Pairs],
        NextArr[I].put_attr(domain, Neibs)
    end,
    % solve($[min(TotalCost), label(mylabel), report(println(cost=TotalCost))], NextArr),
    solve($[min(TotalCost), label(mylabel)], NextArr),
    foreach(I in 2..N)
        if NextArr[I] !== 1 then
            printf("%w -> %w (%w)\n", I-1, NextArr[I]-1, CostArr[I])
        end
    end,
    println(TotalCost).

part2(M) =>
    N = length(M),
    NextArr = new_array(N),
    NextArr :: 1..N,
    CostArr = new_array(N),
    circuit(NextArr),
    foreach(I in 1..N)
        CostArr[I] #> 0,
        element(NextArr[I], M[I], CostArr[I])
    end,
    TotalCost #= sum(CostArr) - 2,
    foreach(I in 1..N)
        Pairs = [(M[I,J], J) : J in 1..N, M[I,J] > 0].sort(),
        Neibs = [J : (_, J) in Pairs],
        NextArr[I].put_attr(domain, Neibs)
    end,
    % solve($[max(TotalCost), label(mylabel), report(println(cost=TotalCost))], NextArr),
    solve($[max(TotalCost), label(mylabel)], NextArr),
    foreach(I in 2..N)
        if NextArr[I] !== 1 then
            printf("%w -> %w (%w)\n", I-1, NextArr[I]-1, CostArr[I])
        end
    end,
    println(TotalCost).

mylabel(V), var(V) =>
    Domain = V.get_attr(domain),
    member(V, Domain).
mylabel(_V) => true.
