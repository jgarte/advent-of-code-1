\chapter{Common Utilities}

\section{Language extensions}

\hs{LambdaCase}\todor{Add link re: LambdaCase} is one of my favorite extensions.

<<Util.hs>>=
{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE LambdaCase #-}

@

\section{Module outline}\todoo{Consider some prose here}

<<Util.hs>>=
module AdventOfCode.Util
  ( Frequencies,
    frequencies,
    frequenciesInt,
    maybeParseByteString,
    findFirstDup,
    hammingDistance,
    hammingSimilar,
    scan,
    count,
    snoc,
    wigglesum,
    fix',
    adjacencies,
    neighborsOf,
  )
where

<<Import functions, operators, and types from other modules.>>

<<Computing frequencies>>

<<Parsing puzzle input>>

<<Manipulating lists>>

<<Miscellaneous functions>>
@

\section{Computing frequencies of elements in a list}

\todor{Describe the Frequencies type alias}

<<Computing frequencies>>=
type Frequencies a = Map a Int

@ %def Frequencies

Define a function \hs{frequencies} to compute the \hs{Frequencies} of elements
in a given list.

<<Computing frequencies>>=
frequencies :: Ord a => [a] -> Frequencies a
@

Starting with the empty map, perform a right-associative fold of the list, using
the binary operator \hs{go}.

<<Computing frequencies>>=
frequencies = foldr go Map.empty
  where
@

Given a key \hs{k} and map of known frequencies, increment the associated
frequency count by \hs{1}, or set it to \hs{1} if no such mapping exists.

<<Computing frequencies>>=
    go k = Map.insertWith (+) k 1

@

<<Computing frequencies>>=
frequenciesInt :: Foldable t => t Int -> IM.IntMap Int
frequenciesInt = foldr go IM.empty
  where
    go k = IM.insertWith (+) k 1
@

\section{Parsing puzzle input}

\todor{Describe the general parsing strategy}

<<Parsing puzzle input>>=
maybeParseByteString :: Parser a -> ByteString -> Maybe a
maybeParseByteString p = parseByteString p mempty >>> \case
  Failure _ -> Nothing
  Success res -> Just res
@ %def maybeParseByteString


\section{Manipulating lists}

\todor{Describe hammingDistance, incl. design choices}
<<Manipulating lists>>=
hammingDistance :: Eq a => [a] -> [a] -> Maybe Integer
hammingDistance (x : xs) (y : ys)
  | x /= y = (+ 1) <$> recur
  | otherwise = recur
  where
    recur = hammingDistance xs ys
hammingDistance [] [] = Just 0
hammingDistance _ _ = Nothing

@ %def hammingDistance

\todor{Describe hammingSimilar}
<<Manipulating lists>>=
hammingSimilar :: Eq a => Integer -> [a] -> [a] -> Bool
hammingSimilar n xs = maybe False (<= n) . hammingDistance xs

@ %def hammingSimilar

Define a function to find the first duplicated element of a list, if such an
element exists.

<<Manipulating lists>>=
findFirstDup :: Ord a => [a] -> Maybe a
@ %def findFirstDup

Recurse over the list until either the end or a duplicate is found.

<<Manipulating lists>>=
findFirstDup = go Set.empty
  where
@

If the list is empty, we've found \hs{Nothing}.

<<Manipulating lists>>=
    go _ [] = Nothing
@

If we've seen \hs{x} before, we've \hs{Just} found a duplicate.

<<Manipulating lists>>=
    go seen (x : xs)
      | x `Set.member` seen = Just x
@

Otherwise, insert \hs{x} into the set of elements we've \hs{seen} and carry on
searching the rest of the list.

<<Manipulating lists>>=
      | otherwise = go (Set.insert x seen) xs

@

Compute a list of successive reduced values, using the monodial operation, from
the left, starting with the monoidal idendity.

\[
  (b_{k})_{k=0}^{\length{a}},\ b_{0} = e\ \text{and}\ b_{k+1} = b_{k} a_{k}
\]
\todoo{Improve this. Consider group theory notation.}

<<Manipulating lists>>=
scan :: Monoid m => [m] -> [m]
scan = scanl mappend mempty
@ %def scan

\todoo{Describe these functions}

<<Miscellaneous functions>>=
count :: (a -> Bool) -> [a] -> Int
count p = length . filter p

snoc :: [a] -> a -> [a]
snoc xs x = xs ++ [x]

@

\href{http://r6.ca/blog/20121209T182914Z.html}\\
\href{https://jaspervdj.be/posts/2012-10-17-wiggling-sums.html}

<<Miscellaneous functions>>=
wigglesum :: Traversable t => (a -> [a]) -> t a -> [t a]
wigglesum wiggle = holesOf traverse >=> experiment wiggle

@

<<Miscellaneous functions>>=
fix' :: Eq a => (a -> a) -> a -> a
fix' f = fix (\g !x -> let fx = f x in if fx == x then x else g fx)

adjacencies :: (Applicative f, Num a, Eq (f a), Traversable f) => [f a]
adjacencies = filter (/= pure 0) $ sequenceA (pure [-1, 0, 1])

neighborsOf :: (Applicative f, Num a, Num (f a), Ord (f a), Traversable f) => f a -> Set (f a)
neighborsOf = Set.fromList . flip map adjacencies . (+)
@

\section{Imports}

<<Import functions, operators, and types from other modules.>>=
import Control.Category ((>>>))
import Control.Comonad.Store (experiment)
import Control.Lens (holesOf)
import Control.Monad ((>=>))
import Data.ByteString (ByteString)
import Data.Function (fix)
import qualified Data.IntMap as IM
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Set (Set)
import qualified Data.Set as Set
import Text.Trifecta (Parser, Result (..), parseByteString)
@
